version: "3.8"
services:
  unbound:
    container_name: unbound
    image: klutchell/unbound:latest
    ports:
      - "53:5053/tcp"
      - "53:5053/udp"
    restart: always
    networks:
      backend:
        aliases:
          - pihole
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    env_file: .env
    environment:
      - WEBPASSWORD_FILE=/run/secrets/PIHOLE_WEBPASSWORD
      - PIHOLE_DNS_=127.0.0.1
      - DNS_FQDN_REQUIRED=true
      - DNS_BOGUS_PRIV=true
      - DNSSEC=true
      - VIRTUAL_HOST=https://pihole.<SUBDOMAIN>.duckdns.org
      - REV_SERVER=true
      - REV_SERVER_CIDR=192.168.0.0/24
      - REV_SERVER_TARGET=192.168.0.1
      - REV_SERVER_DOMAIN=local
      - WEBTHEME=default-auto
      - FTLCONF_REPLY_WHEN_BUSY=DROP
    volumes:
      - ./etc-pihole/:/etc/pihole/
      - ./etc-dnsmasq.d/:/etc/dnsmasq.d/
    restart: always
    network_mode: "service:unbound"
    cap_add:
      - CAP_NET_BIND_SERVICE
      - CAP_NET_RAW
    depends_on:
      - unbound
    secrets:
      - PIHOLE_WEBPASSWORD
  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - FILE__SUBDOMAINS=/run/secrets/MY_DDNS_SUBDOMAINS
      - FILE__TOKEN=/run/secrets/DUCKDNS_TOKEN
      - LOG_FILE=false
    volumes:
      - ./duckdns/config:/config #optional
    restart: always
    networks:
      - backend
    depends_on:
      - pihole
    secrets:
      - DUCKDNS_TOKEN
      - MY_DDNS_SUBDOMAINS
  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    volumes:
        - ./jellyfin/config:/config
        - /media/DATA/media:/data
    env_file: .env
    ports:
      - "8096:8096"
    devices:
      - "/dev/dri:/dev/dri"
    networks:
      - backend
    depends_on:
      - pihole
    restart: always
  postgres:
    image: postgres:14
    restart: always
    volumes:
        - ./postgres/data:/var/lib/postgresql/data
        - ./postgres/init:/docker-entrypoint-initdb.d
    environment:
        - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
        - POSTGRES_USER_FILE=/run/secrets/POSTGRES_USER
    secrets:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_NC_USER
      - POSTGRES_NC_PASSWORD
      - POSTGRES_NC_DB
      - POSTGRES_PROWLARR_USER
      - POSTGRES_PROWLARR_PASSWORD
      - POSTGRES_PROWLARR_DB_MAIN
      - POSTGRES_PROWLARR_DB_LOG
    networks:
      - backend
  nextcloud:
#    image: "nextcloud"
    build: nextcloud_dockerfile
    container_name: nextcloud
    env_file: .env
    environment:
        - APACHE_DISABLE_REWRITE_IP=1
        - TRUSTED_PROXIES=swag
        - OVERWRITEHOST=nextcloud.<SUBDOMAIN>.duckdns.org
        - OVERWITEPROTOCOL=https
        - NEXTCLOUD_TRUSTED_DOMAINS=https://nextcloud.<SUBDOMAIN>.duckdns.org
        - NEXTCLOUD_DATA_DIR=/var/www/html/data
        - NEXTCLOUD_ADMIN_USER_FILE=/run/secrets/NEXTCLOUD_ADMIN_USER
        - NEXTCLOUD_ADMIN_PASSWORD_FILE=/run/secrets/NEXTCLOUD_ADMIN_PASSWORD
        - POSTGRES_HOST=postgres
        - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_NC_PASSWORD
        - POSTGRES_DB_FILE=/run/secrets/POSTGRES_NC_DB
        - POSTGRES_USER_FILE=/run/secrets/POSTGRES_NC_USER
    volumes:
        - ./nextcloud/html:/var/www/html
        - ./nextcloud/config:/var/www/html/config
        - /media/DATA:/data
    restart: always
    depends_on:
      - pihole
      - postgres
    networks:
      - backend
    secrets:
      - NEXTCLOUD_ADMIN_USER
      - NEXTCLOUD_ADMIN_PASSWORD
      - POSTGRES_NC_PASSWORD
      - POSTGRES_NC_DB
      - POSTGRES_NC_USER
      - MY_DDNS_DOMAIN
  dockerproxy :
    privileged: true
    image: tecnativa/docker-socket-proxy
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    environment:
     - AUTH=1
     - SECRETS=1
     - POST=1
     - BUILD=1
     - COMMIT=1
     - CONFIGS=1
     - CONTAINERS=1
     - DISTRIBUTION=1
     - EXEC=1
     - GRPC=1
     - IMAGES=1
     - INFO=1
     - NETWORKS=1
     - NODES=1
     - PLUGINS=1
     - SERVICES=1
     - SESSION=1
     - SWARM=1
     - SYSTEM=1
     - TASKS=1
     - VOLUMES=1
    networks:
      - docker_proxy
    depends_on:
      - pihole
  netdata:
    image: netdata/netdata
    container_name: netdata
    environment:
      - PGID=998
      - DISABLE_TELEMETRY=1
      - DOCKER_HOST=dockerproxy:2375
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./netdata/config:/etc/netdata
      - ./netdata/lib:/var/lib/netdata
      - ./netdata/cache:/var/cache/netdata
      - /etc/os-release:/host/etc/os-release:ro
    restart: always
    networks:
      - backend
      - docker_proxy
    depends_on:
      - pihole
  portainer:
    image: portainer/portainer-ce
    #command: -H tcp://dockerproxy:2375 --tlsskipverify
    container_name: portainer
    volumes:
      - ./portainer:/data
    networks:
      - backend
      - docker_proxy
    depends_on:
      - pihole
    restart: always
  wireguard:
    image: linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    env_file: .env
    volumes:
      - ./wireguard/config:/config
      - /usr/src:/usr/src
    ports:
      - "51820:51820/udp"   #wireguard
      - "57967:57967"       #qbittorrent incoming port
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: always
    depends_on:
      - pihole
    networks:
      backend:
        aliases:
          - jackett
          - qbittorrent
          - flaresolverr
          - prowlarr
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    env_file: .env
    restart: always
    network_mode: "service:wireguard"
    depends_on:
      - pihole
      - wireguard
  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    env_file: .env
    environment:
      - PUID=33
      - PGID=33
      - UMASK_SET=002
    volumes:
      - ./qbittorrent/config:/config
      - /media/DATA:/data
    network_mode: "service:wireguard"
    depends_on:
      - pihole
      - wireguard 
    restart: always
  jackett:
    image: linuxserver/jackett:development
    container_name: jackett
    env_file: .env
    volumes:
      - ./jackett/config:/config
      - ./jackett/blackhole:/downloads
    restart: always
    network_mode: "service:wireguard"
    depends_on:
      - pihole
      - flaresolverr
      - wireguard
  prowlarr:
    image: linuxserver/prowlarr:nightly
    container_name: prowlarr
    volumes:
        - ./prowlarr/config:/config
    env_file: .env
    network_mode: "service:wireguard"
    restart: always
    depends_on:
      - pihole
      - flaresolverr
      - wireguard
      - postgres
  sonarr:
    image: linuxserver/sonarr:develop
    container_name: sonarr
    volumes:
        - ./sonarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1001
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
  radarr:
    image: linuxserver/radarr:nightly
    container_name: radarr
    volumes:
        - ./radarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1002
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
  lidarr:
    image: linuxserver/lidarr:nightly
    container_name: lidarr
    volumes:
        - ./lidarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1003
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
  readarr:
    image: linuxserver/readarr:nightly
    container_name: readarr
    volumes:
        - ./readarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1004
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
  swag:
    image: ghcr.io/linuxserver/swag
    container_name: swag
    cap_add:
      - NET_ADMIN
    env_file: .env
    environment:
      - FILE__URL=/run/secrets/MY_DDNS_DOMAIN
      - SUBDOMAINS=wildcard
      - VALIDATION=duckdns
      - FILE__DUCKDNSTOKEN=/run/secrets/DUCKDNS_TOKEN
      - FILE__EMAIL=/run/secrets/EMAIL
    volumes:
      - ./swag/config:/config
    ports:
      - 443:443
      - 80:80
    networks:
        - frontend
        - backend  
    secrets:
      - EMAIL
      - DUCKDNS_TOKEN
      - MY_DDNS_DOMAIN    
    restart: always
    depends_on:
      - nextcloud
      - jackett
      - prowlarr
      - sonarr
      - radarr
      - lidarr
      - readarr
      - jellyfin
      - qbittorrent
      - pihole
      - wireguard
      - netdata
      - portainer

secrets:
  EMAIL:
    file: ./secrets/EMAIL
  NEXTCLOUD_ADMIN_USER:
    file: ./secrets/NEXTCLOUD_ADMIN_USER
  NEXTCLOUD_ADMIN_PASSWORD:
    file: ./secrets/NEXTCLOUD_ADMIN_PASSWORD
  POSTGRES_NC_PASSWORD:
    file: ./secrets/POSTGRES_NC_PASSWORD
  POSTGRES_NC_DB:
    file: ./secrets/POSTGRES_NC_DB
  POSTGRES_NC_USER:
    file: ./secrets/POSTGRES_NC_USER
  POSTGRES_PASSWORD:
    file: ./secrets/POSTGRES_PASSWORD
  POSTGRES_USER:
    file: ./secrets/POSTGRES_USER
  DUCKDNS_TOKEN:
    file: ./secrets/DUCKDNS_TOKEN
  MY_DDNS_DOMAIN:
    file: ./secrets/MY_DDNS_DOMAIN
  MY_DDNS_SUBDOMAINS:
    file: ./secrets/MY_DDNS_SUBDOMAINS
  PIHOLE_WEBPASSWORD:
    file: ./secrets/PIHOLE_WEBPASSWORD
  POSTGRES_PROWLARR_USER:
    file: ./secrets/POSTGRES_PROWLARR_USER
  POSTGRES_PROWLARR_PASSWORD:
    file: ./secrets/POSTGRES_PROWLARR_PASSWORD
  POSTGRES_PROWLARR_DB_MAIN:
    file: ./secrets/POSTGRES_PROWLARR_DB_MAIN
  POSTGRES_PROWLARR_DB_LOG:
    file: ./secrets/POSTGRES_PROWLARR_DB_LOG

networks:
    frontend:
    backend:
      external: false
    docker_proxy:
      external: false
