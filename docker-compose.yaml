version: "3.8"
services:
  unbound:
    container_name: unbound
    image: klutchell/unbound:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    restart: always
    networks:
      backend:
        aliases:
          - pihole
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    env_file: .env
    environment:
      - WEBPASSWORD=${PIHOLE_WEBPASSWORD}
      - 'PIHOLE_DNS_=127.0.0.1#5053;127.0.0.1#5053'
      - DNS_FQDN_REQUIRED=true
      - DNS_BOGUS_PRIV=true
      - DNSSEC=true
      - REV_SERVER=true
      - REV_SERVER_CIDR=192.168.0.0/24
      - REV_SERVER_TARGET=192.168.0.1
      - REV_SERVER_DOMAIN=local
    volumes:
      - ./etc-pihole/:/etc/pihole/
      - ./etc-dnsmasq.d/:/etc/dnsmasq.d/
    restart: always
    network_mode: "service:unbound"
    cap_add:
      - CAP_NET_BIND_SERVICE
    depends_on:
      - unbound
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/pihole/"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://pihole/"
  noip:
    container_name: noip
    image: mqll/noip:2.1.9
    volumes:
      - ./noip:/usr/local/etc
    restart: always
    networks:
      - backend
    depends_on:
      - pihole
  jellyfin:
    image: "hotio/jellyfin:release"
    container_name: jellyfin
    volumes:
        - ./jellyfin/config:/config
        - /media/DATA/media:/data
    env_file: .env
    ports:
      - "8096:8096"
    devices:
      - "/dev/dri:/dev/dri"
    networks:
      - backend
    depends_on:
      - pihole
    restart: always
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/jellyfin/"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://jellyfin:8096/"
  mariadb:
    image: mariadb
    container_name: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    volumes:
        - ./mariadb:/var/lib/mysql
    env_file: .env
    environment:
        - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    networks:
      - backend
    depends_on:
      - pihole
  nextcloud:
#    image: "nextcloud"
    build: nextcloud_dockerfile
    container_name: nextcloud
    env_file: .env
    environment:
        - APACHE_DISABLE_REWRITE_IP=1
        - OVERWRITEWEBROOT=/nextcloud
        - TRUSTED_PROXIES=bunkerized-nginx
        - NEXTCLOUD_TRUSTED_DOMAINS=${MY_DDNS_DOMAIN}
#        - NEXTCLOUD_TRUSTED_DOMAINS=192.168.0.127
        - NEXTCLOUD_DATA_DIR=/var/www/html/data
        - NEXTCLOUD_ADMIN_USER=${NC_ADMIN_USER}
        - NEXTCLOUD_ADMIN_PASSWORD=${NC_ADMIN_PASSWORD}
        - MYSQL_HOST=mariadb
    volumes:
        - ./nextcloud/html:/var/www/html
        - ./nextcloud/config:/var/www/html/config
        - /media/DATA:/data
    restart: always
    depends_on:
      - pihole
      - mariadb
    networks:
      - backend
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/nextcloud/"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://nextcloud/"
  dockerproxy :
    privileged: true
    image: tecnativa/docker-socket-proxy
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    environment:
     - CONTAINERS=1
     - AUTH=1
     - SECRETS=1
     - POST=1
     - BUILD=1
     - COMMIT=1
     - CONFIGS=1
     - CONTAINERS=1
     - DISTRIBUTION=1
     - EXEC=1
     - GRPC=1
     - IMAGES=1
     - INFO=1
     - NETWORKS=1
     - NODES=1
     - PLUGINS=1
     - SERVICES=1
     - SESSION=1
     - SWARM=1
     - SYSTEM=1
     - TASKS=1
     - VOLUMES=1
    networks:
      - docker_proxy
    depends_on:
      - pihole
  netdata:
    image: netdata/netdata
    container_name: netdata
    environment:
      - PGID=998
      - DISABLE_TELEMETRY=1
      - DOCKER_HOST=dockerproxy:2375
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./netdata/config:/etc/netdata
      - ./netdata/lib:/var/lib/netdata
      - ./netdata/cache:/var/cache/netdata
      - /etc/os-release:/host/etc/os-release:ro
    restart: always
    networks:
      - backend
      - docker_proxy
    depends_on:
      - pihole
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/netdata/"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://netdata:19999/"
  portainer:
    image: portainer/portainer-ce
    command: -H tcp://dockerproxy:2375 --tlsskipverify
    container_name: portainer
    volumes:
      - ./portainer:/data
    networks:
      - backend
      - docker_proxy
    depends_on:
      - pihole
    restart: always
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/portainer/"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://portainer:9000/"
  wireguard:
    image: linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    env_file: .env
    volumes:
      - ./wireguard/config:/config
      - /usr/src:/usr/src
    ports:
      - "51820:51820/udp"   #wireguard
      - "57967:57967"       #qbittorrent incoming port
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: always
    depends_on:
      - pihole
    networks:
      backend:
        aliases:
          - jackett
          - qbittorrent
          - flaresolverr
          - prowlarr
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    env_file: .env
    restart: always
    network_mode: "service:wireguard"
    depends_on:
      - pihole
      - wireguard
  qbittorrent:
      image: linuxserver/qbittorrent
    container_name: qbittorrent
    env_file: .env
    environment:
      - PUID=33
      - PGID=33
      - UMASK_SET=002
    volumes:
      - ./qbitorrent/config:/config
      - /media/DATA:/data
    network_mode: "service:wireguard"
    depends_on:
      - pihole
      - wireguard 
    restart: always
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/qbittorrent"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://qbittorrent:8080"
  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    env_file: .env
    volumes:
      - ./jackett/config:/config
      - ./jackett/blackhole:/downloads
    restart: always
    network_mode: "service:wireguard"
    depends_on:
      - pihole
      - flaresolverr
      - wireguard
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/jackett/"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://jackett:9117/"
  prowlarr:
    image: hotio/prowlarr:nightly
    container_name: prowlarr
    volumes:
        - ./prowlarr/config:/config
        - /media/DATA:/data
    env_file: .env
    network_mode: "service:wireguard"
    restart: always
    depends_on:
      - pihole
      - flaresolverr
      - wireguard
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/prowlarr"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://prowlarr:9696"
  sonarr:
    image: "hotio/sonarr:nightly"
    container_name: sonarr
    volumes:
        - ./sonarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1001
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/sonarr"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://sonarr:8989"
  radarr:
    image: "hotio/radarr:nightly"
    container_name: radarr
    volumes:
        - ./radarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1002
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/radarr"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://radarr:7878"
  lidarr:
    image: "hotio/lidarr:nightly"
    container_name: lidarr
    volumes:
        - ./lidarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1003
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/lidarr"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://lidarr:8686"
  readarr:
    image: "hotio/readarr:nightly"
    container_name: readarr
    volumes:
        - ./readarr/config:/config
        - /media/DATA:/data
    env_file: .env
    environment:
      - PUID=1004
      - PGID=33
    networks:
      - backend
    restart: always
    depends_on:
      - pihole
      - jackett
      - prowlarr
      - qbittorrent
    labels:
      - "bunkerized-nginx.REVERSE_PROXY_URL=/readarr"
      - "bunkerized-nginx.REVERSE_PROXY_HOST=http://readarr:8787"
  bunkerized-nginx:
    image: "bunkerity/bunkerized-nginx"
    container_name: bunkerized-nginx
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
    read_only: true
    tmpfs:
      - /tmp
    volumes:
        - ./nginx/certificates:/etc/letsencrypt
        - ./server-confs:/server-confs:ro         
        - ./modsec-crs-confs:/modsec-crs-confs:ro 
        - ./modsec-confs:/modsec-confs:ro         
    env_file: .env
    environment:
        - SERVER_NAME=${MY_DDNS_DOMAIN}
        - DISABLE_DEFAULT_SERVER=yes
        - AUTO_LETS_ENCRYPT=yes
        - REDIRECT_HTTP_TO_HTTPS=yes
        - MAX_CLIENT_SIZE=0
        - USE_REVERSE_PROXY=yes
        - SERVE_FILES=no
        - ALLOWED_METHODS=GET|POST|HEAD|PROPFIND|DELETE|PUT|MKCOL|MOVE|COPY|PROPPATCH|REPORT
        - USE_BROTLI=yes
        - USE_GZIP=yes
        - X_FRAME_OPTIONS=SAMEORIGIN
        - REFERRER_POLICY=same-origin
        - PROXY_REAL_IP=yes
        - FAIL2BAN_STATUS_CODE=400|401|403|405|444
        - USE_CLAMAV_SCAN=no
    labels:
      - "bunkerized-nginx.AUTOCONF"
    ports:
        - "80:8080"
        - "443:8443"
    networks:
        - frontend
        - backend      
    restart: always
    depends_on:
      - nextcloud
      - jackett
      - prowlarr
      - sonarr
      - radarr
      - lidarr
      - readarr
      - jellyfin
      - qbittorrent
      - pihole
      - wireguard
      - netdata
      - portainer
  myautoconf:
    image: bunkerity/bunkerized-nginx-autoconf
    restart: always
    volumes_from:
      - bunkerized-nginx
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - bunkerized-nginx

networks:
    frontend:
    backend:
      external: false
    docker_proxy:
      external: false
